{"version":3,"sources":["./node_modules/agm-overlays/__ivy_ngcc__/fesm2015/agm-overlays.js"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAmC;AACiG;AACrD;AAChC;;AAEP;AACJ;;AAEpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA,+BAA+B,0DAAY;AAC3C;AACA,8BAA8B,uDAAS;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,QAAQ;AAC9C;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,8BAA8B,+DAAwB,CAAC,8DAA2B,GAAG,+DAAwB,CAAC,uDAAoB,GAAG;AACvL,kBAAkB,+DAAwB,EAAE,wHAAwH;AACpK,QAAQ,4DAAqB,WAAW,uDAAa;AACrD,KAAK;AACL;AACA,QAAQ,4DAAqB,MAAM,yDAAkB;AACrD,KAAK,EAAE,iDAAiD;AACxD,QAAQ,yDAAkB,YAAY,wDAAU;AAChD,KAAK;AACL;AACA,QAAQ,4DAAqB,MAAM,yDAAkB;AACrD,KAAK,EAAE,WAAW,sLAAsL,YAAY,6BAA6B,aAAa,kEAA2B,wJAAwJ;AACjb,QAAQ,6DAAsB;AAC9B,QAAQ,4DAAqB;AAC7B,QAAQ,4DAAqB;AAC7B,QAAQ,0DAAmB;AAC3B,QAAQ,0DAAmB;AAC3B,QAAQ,0DAAmB;AAC3B,KAAK,EAAE,oBAAoB;AAC3B;AACA,KAAK,OAAO,8DAAoB,EAAE;AAClC,KAAK,OAAO,uDAAa;AACzB;AACA;AACA,wDAAU;AACV,IAAI,2DAAK;AACT;AACA,wDAAU;AACV,IAAI,2DAAK;AACT;AACA,wDAAU;AACV,IAAI,2DAAK;AACT;AACA,wDAAU;AACV,IAAI,2DAAK;AACT;AACA,wDAAU;AACV,IAAI,2DAAK;AACT;AACA,wDAAU;AACV,IAAI,4DAAM;AACV;AACA,wDAAU;AACV,IAAI,2DAAK;AACT;AACA,wDAAU;AACV,IAAI,qEAAe,CAAC,uDAAa;AACjC;AACA,wDAAU;AACV,IAAI,2DAAK;AACT;AACA,wDAAU;AACV,IAAI,+DAAS,aAAa,OAAO,wDAAU,EAAE;AAC7C;;AAEA;AACA;AACA,mBAAmB,8DAAuB,EAAE,oBAAoB;AAChE,mBAAmB,8DAAuB,EAAE,2CAA2C,iCAAiC,EAAE;AAC1H,YAAY,4DAAY;AACxB,YAAY;AACZ,4BAA4B,CAAC,+DAAwB;AACrD,cAAc,uDAAS;AACvB;AACA;AACA;AACA,aAAa;AACb,KAAK,gBAAgB,UAAU,OAAO,8DAA2B,EAAE,GAAG,OAAO,uDAAoB,EAAE,EAAE,EAAE,GAAG;AAC1G,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,oDAAM;AACxB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,6DAAe;AACjC,mBAAmB,uDAAa;AAChC,SAAS;AACT,kBAAkB,mDAAK;AACvB;AACA,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,uDAAS;AAC3B,+BAA+B,OAAO,wDAAU,EAAE;AAClD,SAAS,GAAG,EAAE,EAAE;AAChB,cAAc,oDAAoD,gEAAyB,eAAe,4BAA4B,qBAAqB,EAAE,wBAAwB,SAAS,4DAAY,EAAE,EAAE,wBAAwB,qBAAqB,EAAE,EAAE,EAAE,EAAE;AACnQ,4BAA4B,CAAC,+DAAwB;AACrD,cAAc,sDAAQ;AACtB;AACA;AACA,oBAAoB,4DAAY;AAChC;AACA;AACA;AACA,aAAa;AACb,KAAK,eAAe,EAAE;;AAEtB;AACA;AACA;;AAEmC;;AAEnC,2CAA2C,cAAc,2ga","file":"default~pages-ordertrack-ordertrack-module~pages-userloc-userloc-module-es2015.js","sourcesContent":["import { __decorate } from 'tslib';\nimport { EventEmitter, QueryList, Input, Output, ContentChildren, ViewChild, ElementRef, Component, NgModule } from '@angular/core';\nimport { GoogleMapsAPIWrapper, MarkerManager, AgmInfoWindow } from '@agm/core';\nimport { CommonModule } from '@angular/common';\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@agm/core';\n\nconst _c0 = [\"content\"];\nconst _c1 = [\"*\"];\nlet AgmOverlay = class AgmOverlay {\n    constructor(_mapsWrapper, _markerManager //rename to fight the private declaration of parent\n    ) {\n        this._mapsWrapper = _mapsWrapper;\n        this._markerManager = _markerManager;\n        this.visible = true; //possibly doesn't work and just left over from agm-core marker replication\n        this.zIndex = 1;\n        //TIP: Do NOT use this... Just put (click) on your html overlay element\n        this.markerClick = new EventEmitter();\n        this.openInfoWindow = true;\n        this.infoWindow = new QueryList();\n        //TODO, implement this\n        this.draggable = false;\n        //elmGuts:any\n        this._observableSubscriptions = [];\n    }\n    ngAfterViewInit() {\n        //remove reference of info windows\n        const iWins = this.template.nativeElement.getElementsByTagName('agm-info-window');\n        for (let x = iWins.length - 1; x >= 0; --x) {\n            iWins[x].parentNode.removeChild(iWins[x]);\n        }\n        this.load().then(() => {\n            this.onChanges = this.onChangesOverride;\n        });\n    }\n    ngAfterContentInit() {\n        this.infoWindow.changes.subscribe(() => this.handleInfoWindowUpdate());\n    }\n    ngOnChanges(changes) {\n        this.onChanges(changes);\n    }\n    onChanges(changes) { }\n    onChangesOverride(changes) {\n        if (changes.latitude || changes.longitude || changes.zIndex) {\n            this.overlayView.latitude = this.latitude;\n            this.overlayView.longitude = this.longitude;\n            this.overlayView.zIndex = this.zIndex;\n            this.destroy().then(() => this.load());\n        }\n    }\n    ngOnDestroy() {\n        this.destroy();\n    }\n    destroy() {\n        this.destroyed = true;\n        const promise = this._markerManager.deleteMarker(this.overlayView);\n        if (this.overlayView) {\n            if (this.overlayView.div) {\n                this.overlayView.remove();\n            }\n            this.overlayView.setMap(null);\n        }\n        this._observableSubscriptions.forEach((s) => s.unsubscribe());\n        delete this.overlayView;\n        //delete this.elmGuts\n        return promise;\n    }\n    handleInfoWindowUpdate() {\n        if (this.infoWindow.length > 1) {\n            throw new Error('Expected no more than one info window.');\n        }\n        this.infoWindow.forEach(iWin => {\n            iWin.hostMarker = this.overlayView;\n        });\n    }\n    load() {\n        return this._mapsWrapper.getNativeMap()\n            .then(map => {\n            const overlay = this.getOverlay(map);\n            this._markerManager.addMarker(overlay);\n            this._addEventListeners();\n            return this._markerManager.getNativeMarker(overlay);\n        })\n            .then(nativeMarker => {\n            const setMap = nativeMarker.setMap;\n            if (nativeMarker['map']) {\n                this.overlayView.setMap(nativeMarker['map']);\n            }\n            nativeMarker.setMap = (map) => {\n                setMap.call(nativeMarker, map);\n                if (this.overlayView) {\n                    this.overlayView.setMap(map);\n                }\n            };\n        });\n    }\n    getOverlay(map) {\n        this.overlayView = this.overlayView || new google.maps.OverlayView();\n        /* make into foo marker that AGM likes */\n        this.overlayView.iconUrl = \" \";\n        this.overlayView.latitude = this.latitude;\n        this.overlayView.longitude = this.longitude;\n        this.overlayView.visible = false; //hide 40x40 transparent placeholder that prevents hover events\n        /* end */\n        if (this.bounds) {\n            this.overlayView.bounds_ = new google.maps.LatLngBounds(new google.maps.LatLng(this.latitude + this.bounds.x.latitude, this.longitude + this.bounds.x.longitude), new google.maps.LatLng(this.latitude + this.bounds.y.latitude, this.longitude + this.bounds.y.longitude));\n        }\n        // js-marker-clusterer does not support updating positions. We are forced to delete/add and compensate for .removeChild calls\n        const elm = this.template.nativeElement.children[0];\n        //const elm =  this.elmGuts || this.template.nativeElement.children[0]\n        //we must always be sure to steal our stolen element back incase we are just in middle of changes and will redraw\n        const restore = (div) => {\n            this.template.nativeElement.appendChild(div);\n        };\n        this.overlayView.remove = function () {\n            if (!this.div)\n                return;\n            this.div.parentNode.removeChild(this.div);\n            restore(this.div);\n            delete this.div;\n        };\n        this.overlayView.getDiv = function () {\n            return this.div;\n        };\n        this.overlayView.draw = function () {\n            if (!this.div) {\n                this.div = elm;\n                const panes = this.getPanes();\n                // if no panes then assumed not on map\n                if (!panes || !panes.overlayImage)\n                    return;\n                panes.overlayImage.appendChild(elm);\n            }\n            const latlng = new google.maps.LatLng(this.latitude, this.longitude);\n            const proj = this.getProjection();\n            if (!proj)\n                return;\n            const point = proj.fromLatLngToDivPixel(latlng);\n            if (point) {\n                elm.style.left = (point.x - 10) + 'px';\n                elm.style.top = (point.y - 20) + 'px';\n            }\n            if (this.bounds_) {\n                // stretch content between two points leftbottom and righttop and resize\n                const proj = this.getProjection();\n                const sw = proj.fromLatLngToDivPixel(this.bounds_.getSouthWest());\n                const ne = proj.fromLatLngToDivPixel(this.bounds_.getNorthEast());\n                this.div.style.left = sw.x + 'px';\n                this.div.style.top = ne.y + 'px';\n                this.div.children[0].style.width = ne.x - sw.x + 'px';\n                this.div.children[0].style.height = sw.y - ne.y + 'px';\n            }\n        };\n        elm.addEventListener(\"click\", event => {\n            this.handleTap();\n            event.stopPropagation();\n        });\n        this.handleInfoWindowUpdate();\n        return this.overlayView;\n    }\n    handleTap() {\n        if (this.openInfoWindow) {\n            this.infoWindow.forEach(infoWindow => {\n                infoWindow.open();\n            });\n        }\n        this.markerClick.emit(null);\n    }\n    _addEventListeners() {\n        const eo = this._markerManager.createEventObservable('click', this.overlayView);\n        const cs = eo.subscribe(() => this.handleTap());\n        this._observableSubscriptions.push(cs);\n    }\n};\nAgmOverlay.ɵfac = function AgmOverlay_Factory(t) { return new (t || AgmOverlay)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.GoogleMapsAPIWrapper), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.MarkerManager)); };\nAgmOverlay.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: AgmOverlay, selectors: [[\"agm-overlay\"]], contentQueries: function AgmOverlay_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, AgmInfoWindow, false);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.infoWindow = _t);\n    } }, viewQuery: function AgmOverlay_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, true, ElementRef);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.template = _t.first);\n    } }, inputs: { visible: \"visible\", zIndex: \"zIndex\", openInfoWindow: \"openInfoWindow\", draggable: [\"markerDraggable\", \"draggable\"], latitude: \"latitude\", longitude: \"longitude\", bounds: \"bounds\" }, outputs: { markerClick: \"markerClick\" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], ngContentSelectors: _c1, decls: 4, vars: 0, consts: [[\"content\", \"\"], [2, \"position\", \"absolute\"]], template: function AgmOverlay_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"div\", null, 0);\n        ɵngcc0.ɵɵelementStart(2, \"div\", 1);\n        ɵngcc0.ɵɵprojection(3);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n    } }, encapsulation: 2 });\nAgmOverlay.ctorParameters = () => [\n    { type: GoogleMapsAPIWrapper },\n    { type: MarkerManager //rename to fight the private declaration of parent\n     }\n];\n__decorate([\n    Input()\n], AgmOverlay.prototype, \"latitude\", void 0);\n__decorate([\n    Input()\n], AgmOverlay.prototype, \"longitude\", void 0);\n__decorate([\n    Input()\n], AgmOverlay.prototype, \"visible\", void 0);\n__decorate([\n    Input()\n], AgmOverlay.prototype, \"zIndex\", void 0);\n__decorate([\n    Input()\n], AgmOverlay.prototype, \"bounds\", void 0);\n__decorate([\n    Output()\n], AgmOverlay.prototype, \"markerClick\", void 0);\n__decorate([\n    Input()\n], AgmOverlay.prototype, \"openInfoWindow\", void 0);\n__decorate([\n    ContentChildren(AgmInfoWindow)\n], AgmOverlay.prototype, \"infoWindow\", void 0);\n__decorate([\n    Input('markerDraggable')\n], AgmOverlay.prototype, \"draggable\", void 0);\n__decorate([\n    ViewChild('content', { read: ElementRef })\n], AgmOverlay.prototype, \"template\", void 0);\n\nlet AgmOverlays = class AgmOverlays {\n};\nAgmOverlays.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: AgmOverlays });\nAgmOverlays.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function AgmOverlays_Factory(t) { return new (t || AgmOverlays)(); }, imports: [[\n            CommonModule\n        ]] });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AgmOverlay, [{\n        type: Component,\n        args: [{\n                selector: \"agm-overlay\",\n                template: '<div #content><div style=\"position:absolute\"><ng-content></ng-content></div></div>'\n            }]\n    }], function () { return [{ type: ɵngcc1.GoogleMapsAPIWrapper }, { type: ɵngcc1.MarkerManager }]; }, { visible: [{\n            type: Input\n        }], zIndex: [{\n            type: Input\n        }], markerClick: [{\n            type: Output\n        }], openInfoWindow: [{\n            type: Input\n        }], infoWindow: [{\n            type: ContentChildren,\n            args: [AgmInfoWindow]\n        }], draggable: [{\n            type: Input,\n            args: ['markerDraggable']\n        }], latitude: [{\n            type: Input\n        }], longitude: [{\n            type: Input\n        }], bounds: [{\n            type: Input\n        }], template: [{\n            type: ViewChild,\n            args: ['content', { read: ElementRef }]\n        }] }); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(AgmOverlays, { declarations: function () { return [AgmOverlay]; }, imports: function () { return [CommonModule]; }, exports: function () { return [AgmOverlay]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AgmOverlays, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    CommonModule\n                ],\n                declarations: [AgmOverlay],\n                exports: [AgmOverlay]\n            }]\n    }], null, null); })();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { AgmOverlay, AgmOverlays };\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,"],"sourceRoot":"webpack:///"}