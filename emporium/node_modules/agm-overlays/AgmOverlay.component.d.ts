import { EventEmitter, ElementRef, QueryList } from "@angular/core";
import { AgmInfoWindow, MarkerManager, GoogleMapsAPIWrapper } from "@agm/core";
import * as ɵngcc0 from '@angular/core';
export interface latLng {
    latitude: number;
    longitude: number;
}
export interface bounds {
    x: latLng;
    y: latLng;
}
export interface latLngPlus {
    latitude: number;
    longitude: number;
    bounds?: bounds;
}
export declare class AgmOverlay {
    protected _mapsWrapper: GoogleMapsAPIWrapper;
    private _markerManager;
    latitude: number;
    longitude: number;
    visible: boolean;
    zIndex: number;
    bounds: bounds;
    markerClick: EventEmitter<void>;
    openInfoWindow: boolean;
    infoWindow: QueryList<AgmInfoWindow>;
    draggable: boolean;
    template: ElementRef;
    destroyed: boolean;
    overlayView: any;
    private _observableSubscriptions;
    constructor(_mapsWrapper: GoogleMapsAPIWrapper, _markerManager: MarkerManager);
    ngAfterViewInit(): void;
    ngAfterContentInit(): void;
    ngOnChanges(changes: any): void;
    onChanges(changes: any): void;
    onChangesOverride(changes: any): void;
    ngOnDestroy(): void;
    destroy(): Promise<any>;
    private handleInfoWindowUpdate;
    load(): Promise<void>;
    getOverlay(map: any): any;
    handleTap(): void;
    _addEventListeners(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<AgmOverlay, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<AgmOverlay, "agm-overlay", never, { "visible": "visible"; "zIndex": "zIndex"; "openInfoWindow": "openInfoWindow"; "draggable": "markerDraggable"; "latitude": "latitude"; "longitude": "longitude"; "bounds": "bounds"; }, { "markerClick": "markerClick"; }, ["infoWindow"], ["*"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQWdtT3ZlcmxheS5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsiQWdtT3ZlcmxheS5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFdmVudEVtaXR0ZXIsIEVsZW1lbnRSZWYsIFF1ZXJ5TGlzdCB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQgeyBBZ21JbmZvV2luZG93LCBNYXJrZXJNYW5hZ2VyLCBHb29nbGVNYXBzQVBJV3JhcHBlciB9IGZyb20gXCJAYWdtL2NvcmVcIjtcbmV4cG9ydCBpbnRlcmZhY2UgbGF0TG5nIHtcbiAgICBsYXRpdHVkZTogbnVtYmVyO1xuICAgIGxvbmdpdHVkZTogbnVtYmVyO1xufVxuZXhwb3J0IGludGVyZmFjZSBib3VuZHMge1xuICAgIHg6IGxhdExuZztcbiAgICB5OiBsYXRMbmc7XG59XG5leHBvcnQgaW50ZXJmYWNlIGxhdExuZ1BsdXMge1xuICAgIGxhdGl0dWRlOiBudW1iZXI7XG4gICAgbG9uZ2l0dWRlOiBudW1iZXI7XG4gICAgYm91bmRzPzogYm91bmRzO1xufVxuZXhwb3J0IGRlY2xhcmUgY2xhc3MgQWdtT3ZlcmxheSB7XG4gICAgcHJvdGVjdGVkIF9tYXBzV3JhcHBlcjogR29vZ2xlTWFwc0FQSVdyYXBwZXI7XG4gICAgcHJpdmF0ZSBfbWFya2VyTWFuYWdlcjtcbiAgICBsYXRpdHVkZTogbnVtYmVyO1xuICAgIGxvbmdpdHVkZTogbnVtYmVyO1xuICAgIHZpc2libGU6IGJvb2xlYW47XG4gICAgekluZGV4OiBudW1iZXI7XG4gICAgYm91bmRzOiBib3VuZHM7XG4gICAgbWFya2VyQ2xpY2s6IEV2ZW50RW1pdHRlcjx2b2lkPjtcbiAgICBvcGVuSW5mb1dpbmRvdzogYm9vbGVhbjtcbiAgICBpbmZvV2luZG93OiBRdWVyeUxpc3Q8QWdtSW5mb1dpbmRvdz47XG4gICAgZHJhZ2dhYmxlOiBib29sZWFuO1xuICAgIHRlbXBsYXRlOiBFbGVtZW50UmVmO1xuICAgIGRlc3Ryb3llZDogYm9vbGVhbjtcbiAgICBvdmVybGF5VmlldzogYW55O1xuICAgIHByaXZhdGUgX29ic2VydmFibGVTdWJzY3JpcHRpb25zO1xuICAgIGNvbnN0cnVjdG9yKF9tYXBzV3JhcHBlcjogR29vZ2xlTWFwc0FQSVdyYXBwZXIsIF9tYXJrZXJNYW5hZ2VyOiBNYXJrZXJNYW5hZ2VyKTtcbiAgICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZDtcbiAgICBuZ0FmdGVyQ29udGVudEluaXQoKTogdm9pZDtcbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBhbnkpOiB2b2lkO1xuICAgIG9uQ2hhbmdlcyhjaGFuZ2VzOiBhbnkpOiB2b2lkO1xuICAgIG9uQ2hhbmdlc092ZXJyaWRlKGNoYW5nZXM6IGFueSk6IHZvaWQ7XG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcbiAgICBkZXN0cm95KCk6IFByb21pc2U8YW55PjtcbiAgICBwcml2YXRlIGhhbmRsZUluZm9XaW5kb3dVcGRhdGU7XG4gICAgbG9hZCgpOiBQcm9taXNlPHZvaWQ+O1xuICAgIGdldE92ZXJsYXkobWFwOiBhbnkpOiBhbnk7XG4gICAgaGFuZGxlVGFwKCk6IHZvaWQ7XG4gICAgX2FkZEV2ZW50TGlzdGVuZXJzKCk6IHZvaWQ7XG59XG4iXX0=